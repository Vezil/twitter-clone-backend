generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int          @default(autoincrement()) @id
  email          String       @unique
  password       String
  name           String?
  profile        Profile?
  tweets         Tweet[]
  likedTweets    LikedTweet[]
  comments       Comment[]
  followingUsers Following[]
}

model LikedTweet {
  id      Int      @default(autoincrement()) @id
  likedAt DateTime @default(now())
  userId  Int?
  tweetId Int?
  tweet   Tweet?   @relation(fields: [tweetId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
}

model Following {
  id       Int    @default(autoincrement()) @id
  name     String
  avatar   String
  followId Int
  user     User?  @relation(fields: [userId], references: [id])
  userId   Int?
}

model Profile {
  id        Int      @default(autoincrement()) @id
  bio       String?
  location  String?
  website   String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int?     @unique
  User      User?    @relation(fields: [userId], references: [id])
}

model Tweet {
  id        Int          @default(autoincrement()) @id
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  likes     LikedTweet[]
  authorId  Int?
  User      User?        @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id        Int       @default(autoincrement()) @id
  content   String?
  createdAt DateTime  @default(now())
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  tweetId   Int?
  tweet     Tweet?    @relation(fields: [tweetId], references: [id])
  commentId Int?
  comments  Comment[] @relation("CommentToComment")
  comment   Comment?  @relation("CommentToComment", fields: [commentId], references: [id])
}